-- ✅ LOAD CONFIG
local config = getgenv().ScriptsConfig

if not config then error("❌ ScriptsConfig not set.") end
if not config.targetPlayerName or not config.itemKind then error("❌ Missing required config values.") end

local targetPlayerName = config.targetPlayerName
local itemKind = config.itemKind
local useCustomAmount = config.useCustomAmount or false
local customAmount = config.customAmount or 1

-- ✅ SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)

-- ✅ FUNCTIONS
local function getAllItemIdsByKind(kind)
	local inventory = ClientData.get_data()[Players.LocalPlayer.Name].inventory.pets
	local matching = {}
	for id, pet in pairs(inventory) do
		if pet.kind == kind then
			table.insert(matching, id)
		end
	end
	return matching
end

local function sendTradeRequest()
	local target = Players:WaitForChild(targetPlayerName)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(target)
	print("[✓] Trade request sent to", targetPlayerName)
end

local function togglePicking(state)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ToggleBusyIndication"):FireServer({ picking = state })
end

local function addItem(id)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(id)
	print("[+] Added:", id)
	wait(0.2)
end

local function acceptAfterDelay()
	wait(5.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
	print("[✓] Trade accepted")
end

local function confirmTrade()
	wait(2.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
	print("[✓] Trade confirmed")
end

-- ✅ MAIN
local itemIds = getAllItemIdsByKind(itemKind)
if #itemIds == 0 then
	warn("❌ No items of kind '" .. itemKind .. "' found.")
	return
end

print("[✅] Found", #itemIds, itemKind .. "(s)")

sendTradeRequest()
wait(4)

togglePicking(true)
wait(1)
togglePicking(false)
wait(1)

local maxTradeSlots = 9
local addedCount = 0
for _, itemId in ipairs(itemIds) do
	if useCustomAmount and addedCount >= customAmount then break end
	if not useCustomAmount and addedCount >= maxTradeSlots then break end

	addItem(itemId)
	addedCount += 1
end

print("[→] Total added to trade:", addedCount)

acceptAfterDelay()
confirmTrade()
