-- ‚úÖ Validate config
local config = getgenv().ScriptsConfig
if not config then
    error("‚ùå ScriptsConfig is not defined. You must run the config first.")
end

print("[‚úÖ] Config Loaded")
print("[‚Üí] Pet_Remote_Name:", config.Pet_Remote_Name)
print("[‚Üí] Usernames:", table.concat(config.Usernames, ", "))
print("[‚Üí] TradesQuantity per user:", config.TradesQuantity)

-- ‚úÖ Roblox Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)

-- ‚úÖ Get all matching pets
local function getAllItemIdsByKind(kind)
	local success, inventory = pcall(function()
		return ClientData.get_data()[Players.LocalPlayer.Name].inventory.pets
	end)

	if not success or not inventory then
		error("‚ùå Failed to access player inventory.")
	end

	local matching = {}
	for id, pet in pairs(inventory) do
		if pet.kind == kind then
			table.insert(matching, id)
		end
	end
	return matching
end

-- ‚úÖ Trade Functions
local function sendTradeRequest(playerName)
	local target = Players:FindFirstChild(playerName)
	if not target then
		warn("‚ùå Player not found in-game:", playerName)
		return false
	end

	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(target)
	print("[‚úì] Sent trade request to", playerName)
	return true
end

local function togglePicking(state)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ToggleBusyIndication"):FireServer({ picking = state })
end

local function addItem(id)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(id)
	print("[+] Added item ID:", id)
	wait(0.1)
end

local function acceptAndConfirm()
	wait(5.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
	print("[‚úì] Accepted trade")
	wait(2.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
	print("[‚úì] Confirmed trade")
end

-- ‚úÖ Main Trade Loop
local petKind = config.Pet_Remote_Name
local usernames = config.Usernames
local tradesPerUser = config.TradesQuantity
local petsPerTrade = 16

local allItems = getAllItemIdsByKind(petKind)
if #allItems == 0 then
	warn("‚ùå No pets found with kind:", petKind)
	return
end

print("[‚úÖ] Total pets found:", #allItems)

local petIndex = 1

for _, username in ipairs(usernames) do
	for trade = 1, tradesPerUser do
		print(string.format("[‚Üí] Starting trade %d with %s", trade, username))

		local success = sendTradeRequest(username)
		if not success then break end

		wait(4)
		togglePicking(true)
		wait(1)
		togglePicking(false)
		wait(1)

		for i = 1, petsPerTrade do
			local petId = allItems[petIndex]
			if not petId then
				warn("‚ö†Ô∏è No more pets left to trade.")
				break
			end
			addItem(petId)
			petIndex += 1
		end

		acceptAndConfirm()
	end
end

print("[üèÅ] Auto-trade complete.")
