-- ‚úÖ LOAD CONFIG
local config = getgenv().ScriptsConfig

if not config == nil then error("‚ùå ScriptsConfig is not set.") end
if not config.targetPlayerName or not config.itemKind then error("‚ùå Missing required config values.") end

local targetPlayerName = config.targetPlayerName
local itemKind = config.itemKind
local useCustomAmount = config.useCustomAmount or false
local customAmount = config.customAmount or 1
local tradeCount = config.tradeCount or 1

-- ‚úÖ DEHASH PATCH
local function rename(remotename, hashedremote)
	if typeof(hashedremote) == "Instance" and typeof(remotename) == "string" then
		hashedremote.Name = remotename
	end
end

local success, RouterClient = pcall(function()
	return require(game:GetService("ReplicatedStorage")
		:WaitForChild("ClientModules")
		:WaitForChild("Core")
		:WaitForChild("RouterClient")
		:WaitForChild("RouterClient"))
end)

if success and RouterClient and type(RouterClient.init) == "function" then
	local ok, upvalue = pcall(function()
		return getupvalue(RouterClient.init, 7)
	end)

	if ok and type(upvalue) == "table" then
		for k, v in pairs(upvalue) do
			rename(k, v)
		end
		print("[‚úì] Remotes dehashed successfully.")
	else
		warn("‚ö†Ô∏è getupvalue(7) failed or returned non-table.")
	end
else
	warn("‚ö†Ô∏è RouterClient not found or unreadable.")
end

-- ‚úÖ SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)

-- ‚úÖ TRADE FUNCTIONS
local function getAllItemIdsByKind(kind)
	local inventory = ClientData.get_data()[Players.LocalPlayer.Name].inventory.pets
	local matching = {}
	for id, pet in pairs(inventory) do
		if pet.kind == kind then
			table.insert(matching, id)
		end
	end
	return matching
end

local function sendTradeRequest()
	local target = Players:WaitForChild(targetPlayerName)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(target)
	print("[‚úì] Trade request sent to", targetPlayerName)
end

local function togglePicking(state)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ToggleBusyIndication"):FireServer({ picking = state })
end

local function addItem(id)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(id)
	print("[+] Added:", id)
	wait(0.2)
end

local function acceptAfterDelay()
	wait(5.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
	print("[‚úì] Trade accepted")
end

local function confirmAndWaitForEnd()
	wait(2.5)
	ReplicatedStorage:WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
	print("[‚úì] Trade confirmed")

	local success = false
	local finished = false

	local conn = ReplicatedStorage.API.TradeAPI.ClientTradeEnded.OnClientEvent:Connect(function(data)
		finished = true
		if typeof(data) == "table" and data.success == true then
			success = true
			print("[‚úÖ] Trade completed successfully.")
		else
			print("[‚ùå] Trade failed or was cancelled.")
		end
		conn:Disconnect()
	end)

	local timeout = 0
	while not finished and timeout < 10 do
		wait(1)
		timeout += 1
	end

	if not finished then
		warn("‚ö†Ô∏è Trade did not finish in time.")
	end

	return success
end

-- ‚úÖ MAIN LOGIC
local itemIds = getAllItemIdsByKind(itemKind)
if #itemIds == 0 then
	warn("‚ùå No items of kind '" .. itemKind .. "' found.")
	return
end

print("[‚úÖ] Found", #itemIds, itemKind .. "(s)")

local maxTradeSlots = 9
local petIndex = 1

for tradeNumber = 1, tradeCount do
	print("[‚Üí] Starting trade #"..tradeNumber)

	sendTradeRequest()
	wait(4)

	togglePicking(true)
	wait(1)
	togglePicking(false)
	wait(1)

	local addedCount = 0
	for slot = 1, maxTradeSlots do
		if useCustomAmount and addedCount >= customAmount then break end
		if not useCustomAmount and addedCount >= maxTradeSlots then break end

		local itemId = itemIds[petIndex]
		if not itemId then
			warn("‚ö†Ô∏è Out of pets to trade.")
			break
		end

		addItem(itemId)
		petIndex += 1
		addedCount += 1
	end

	print("[‚Üí] Total added to trade:", addedCount)
	if addedCount > 0 then
		acceptAfterDelay()
		local success = confirmAndWaitForEnd()
		if not success then
			print("[‚úã] Stopping further trades due to failure.")
			break
		end
	end
end

print("[üèÅ] Script finished.")
