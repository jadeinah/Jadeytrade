-- ✅ LOAD CONFIG
local config = getgenv().ScriptsConfig

if not config then error("❌ ScriptsConfig is not set.") end
if not config.targetPlayerName or not config.itemKind then error("❌ Missing required config values.") end

local targetPlayerName = config.targetPlayerName
local itemKind = config.itemKind
local useCustomAmount = config.useCustomAmount or false
local customAmount = config.customAmount or 1
local tradeCount = config.tradeCount or 1

-- ✅ SERVICES
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientData = require(ReplicatedStorage.ClientModules.Core.ClientData)

-- ✅ YOUR REMOTE LOCATION (CHANGE IF NEEDED)
local RemoteFolder = ReplicatedStorage:WaitForChild("Remotes") -- ⬅️ change "Remotes" to your folder name

-- ✅ DEHASH PATCH
local function rename(remotename, hashedremote)
	if typeof(hashedremote) == "Instance" and typeof(remotename) == "string" then
		hashedremote.Name = remotename
	end
end

local success, RouterClient = pcall(function()
	return require(ReplicatedStorage
		:WaitForChild("ClientModules")
		:WaitForChild("Core")
		:WaitForChild("RouterClient")
		:WaitForChild("RouterClient"))
end)

if success and RouterClient and type(RouterClient.init) == "function" then
	local ok, upvalue = pcall(function()
		return getupvalue(RouterClient.init, 7)
	end)

	if ok and type(upvalue) == "table" then
		for k, v in pairs(upvalue) do
			rename(k, v)
		end
		print("[✓] Remotes dehashed successfully.")
	else
		warn("⚠️ getupvalue(7) failed or returned non-table.")
	end
else
	warn("⚠️ RouterClient not found or unreadable.")
end

-- ✅ TRADE FUNCTIONS
local function getAllItemIdsByKind(kind)
	local inventory = ClientData.get_data()[Players.LocalPlayer.Name].inventory.pets
	local matching = {}
	for id, pet in pairs(inventory) do
		if pet.kind == kind then
			table.insert(matching, id)
		end
	end
	return matching
end

local function sendTradeRequest()
	local target = Players:WaitForChild(targetPlayerName)
	RemoteFolder:WaitForChild("SendTradeRequest"):FireServer(target)
	print("[✓] Trade request sent to", targetPlayerName)
end

local function togglePicking(state)
	RemoteFolder:WaitForChild("ToggleBusyIndication"):FireServer({ picking = state })
end

local function addItem(id)
	RemoteFolder:WaitForChild("AddItemToOffer"):FireServer(id)
	print("[+] Added:", id)
	wait(0.2)
end

local function acceptAfterDelay()
	wait(5.5)
	RemoteFolder:WaitForChild("AcceptNegotiation"):FireServer()
	print("[✓] Trade accepted")
end

local function confirmTrade()
	wait(2.5)
	RemoteFolder:WaitForChild("ConfirmTrade"):FireServer()
	print("[✓] Trade confirmed")
end

-- ✅ MAIN LOGIC
local itemIds = getAllItemIdsByKind(itemKind)
if #itemIds == 0 then
	warn("❌ No items of kind '" .. itemKind .. "' found.")
	return
end

print("[✅] Found", #itemIds, itemKind .. "(s)")

local maxTradeSlots = 9
local petIndex = 1

for tradeNumber = 1, tradeCount do
	print("[→] Starting trade #"..tradeNumber)

	sendTradeRequest()
	wait(4)

	togglePicking(true)
	wait(1)
	togglePicking(false)
	wait(1)

	local addedCount = 0
	for slot = 1, maxTradeSlots do
		if useCustomAmount and addedCount >= customAmount then break end
		if not useCustomAmount and addedCount >= maxTradeSlots then break end

		local itemId = itemIds[petIndex]
		if not itemId then
			warn("⚠️ Out of pets to trade.")
			break
		end

		addItem(itemId)
		petIndex += 1
		addedCount += 1
	end

	print("[→] Total added to trade:", addedCount)

	if addedCount > 0 then
		acceptAfterDelay()
		confirmTrade()
		wait(20) -- ✅ wait before next trade
	else
		warn("❌ No pets added. Stopping.")
		break
	end
end

print("[🏁] All trades done or stopped.")
